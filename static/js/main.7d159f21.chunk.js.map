{"version":3,"sources":["components/PostList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorMessage.ts","components/NewCommentForm/NewCommentForm.tsx","components/CommentsList/CommentsList.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","openPost","setIsNewCommentFormActive","className","map","post","id","title","isThisPostSelected","type","classNames","onClick","currentPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorMessage","client","NewCommentForm","React","memo","postId","setNewComment","setErrorMessage","useState","isNameError","setIsNameError","isEmailError","setIsEmailError","isBodyError","setIsBodyError","name","setName","email","setEmail","setBody","isLoading","setIsLoading","htmlFor","placeholder","value","onChange","event","target","preventDefault","catch","e","Add","Error","message","finally","addComment","CommentsList","comments","setCommentIdToDelete","comment","href","PostDetails","isNewCommentFormActive","postComments","setPostComments","hasCommentsLoadingError","setHasCommentsLoadingError","isCommentsLOading","setIsCommentsLoading","isPostCommentsEmpty","setIsPostCommentsEmpty","errorMessage","useEffect","length","Get","commentId","updatedComments","filter","Delete","newComment","current","UserSelector","setUser","users","setUsers","currentUser","setCurrentUser","isDropdownActive","setIsDropdownActive","dropdownRef","useRef","handleClickOutside","contains","window","addEventListener","removeEventListener","ref","role","user","selectUser","App","selectedUser","setSelectedUser","userPosts","setUserPosts","hasUserPostsLoadError","setHasUserPostsLoadError","isUserPostsLoading","setIsUserPostsLoading","isUserPostsEmpty","setIsUserPostsEmpty","openedPost","setOpenedPost","ReactDOM","render","document","getElementById"],"mappings":"wRAWaA,EAA6B,SAAC,GAKpC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,SACAC,EACI,EADJA,0BASA,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGJ,EAAMK,KAAI,SAAAC,GACT,IAAQC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MACNC,EAAqBR,IAAiBK,EAE5C,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBC,IAEtB,oBAAI,UAAQ,YAAZ,SACGC,IAGH,oBAAIJ,UAAU,8BAAd,SACE,wBACEM,KAAK,SACL,UAAQ,aACRN,UAAWO,IAAW,iBAAkB,CACtC,YAAaF,IAEfG,QAAS,kBAxC4BC,EAwCYP,EAvCjEJ,EAuC6CO,EAtCzC,KAAOI,QAEXV,GAA0B,GAJN,IAAiCU,GAkCvC,SAQGJ,EAAqB,QAAU,aAhBdF,e,OCzCzBO,G,MAAS,kBACpB,qBAAKV,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCJbW,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,ICjCKC,EDiCCC,EACN,SAAIb,GAAJ,OAAoBD,EAAWC,IADzBa,EAEL,SAAIb,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDW,EAIH,SAACb,GAAD,OAAiBD,EAAQC,EAAK,Y,SCrC5BY,K,mCAAAA,E,6BAAAA,E,oCAAAA,M,KCYL,IAAME,EAAkCC,IAAMC,MAAK,YAInD,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,cACAC,EACI,EADJA,gBAEA,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA0BR,mBAAS,IAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAwBV,mBAAS,IAAjC,mBAAOhB,EAAP,KAAa2B,EAAb,KACA,EAAkCX,oBAAS,GAA3C,mBAAOY,EAAP,KAAkBC,EAAlB,KAgEA,OACE,uBAAM,UAAQ,iBAAd,UACE,sBAAKnD,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQoD,QAAQ,sBAAjC,yBAIA,sBAAKpD,UAAU,yCAAf,UACE,uBACEM,KAAK,OACLuC,KAAK,OACL1C,GAAG,sBACHkD,YAAY,eACZC,MAAOT,EACP7C,UAAWO,IAAW,QAAS,CAC7B,YAAagC,IAEfgB,SA/Ee,SAACC,GACxBhB,GAAe,GACfM,EAAQU,EAAMC,OAAOH,UAgFf,sBAAMtD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGduC,GACC,sBACEvC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuC,GACC,mBAAGvC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQoD,QAAQ,uBAAjC,0BAIA,sBAAKpD,UAAU,yCAAf,UACE,uBACEM,KAAK,OACLuC,KAAK,QACL1C,GAAG,uBACHkD,YAAY,iBACZC,MAAOP,EACP/C,UAAWO,IAAW,QAAS,CAC7B,YAAakC,IAEfc,SAjHgB,SAACC,GACzBd,GAAgB,GAChBM,EAASQ,EAAMC,OAAOH,UAkHhB,sBAAMtD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdyC,GACC,sBACEzC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlByC,GACC,mBAAGzC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQoD,QAAQ,eAAjC,0BAIA,qBAAKpD,UAAU,UAAf,SACE,0BACEG,GAAG,eACH0C,KAAK,OACLQ,YAAY,oBACZC,MAAOhC,EACPtB,UAAWO,IAAW,WAAY,CAChC,YAAaoC,IAEfY,SAlJe,SAACC,GACxBZ,GAAe,GACfK,EAAQO,EAAMC,OAAOH,YAoJhBX,GACC,mBAAG3C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEM,KAAK,SACLN,UAAWO,IAAW,iBAAkB,CACtC,aAAc2C,IAEhB1C,QAAS,SAAAgD,GAAK,OAtJxB,SAAoBA,GAClBA,EAAME,iBAEDb,GACHL,GAAe,GAGZO,GACHL,GAAgB,GAGbpB,GACHsB,GAAe,GAGZC,GAASE,GAAUzB,IAIxB6B,GAAa,GAEbpB,EAAqB,YAAa,CAChCI,SACAU,OACAE,QACAzB,SAECI,KAAKU,GACLuB,OAAM,SAAAC,GAEL,MADAvB,EAAgBP,EAAa+B,KACvB,IAAIC,MAAMF,EAAEG,YAEnBC,SAAQ,WACPf,EAAQ,IACRE,GAAa,OAoHSc,CAAWT,IAL/B,mBAWF,qBAAKxD,UAAU,UAAf,SAEE,wBACEM,KAAK,QACLN,UAAU,0BACVQ,QA1KI,WACZsC,EAAQ,IACRE,EAAS,IACTC,EAAQ,IACRT,GAAe,GACfE,GAAgB,GAChBE,GAAe,IAiKT,8BCpMGsB,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,qBASA,OACE,qCACE,mBAAGpE,UAAU,aAAb,uBAECmE,EAASlE,KAAI,SAAAoE,GAAO,OACnB,0BAEErE,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBACEsE,KAAI,iBAAYD,EAAQtB,OACxB,UAAQ,gBAFV,SAIGsB,EAAQxB,OAEX,wBACE,UAAQ,gBACRvC,KAAK,SACLN,UAAU,kBACV,aAAW,SACXQ,QAAS,kBAAM4D,EAAqBC,EAAQlE,KAL9C,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGqE,EAAQ/C,SAvBN+C,EAAQlE,WCbVoE,EAA+B,SAAC,GAItC,IAHLrE,EAGI,EAHJA,KACAsE,EAEI,EAFJA,uBACAzE,EACI,EADJA,0BAEA,EAAwCuC,mBAA2B,MAAnE,mBAAOmC,EAAP,KAAqBC,EAArB,KACA,EAA8DpC,oBAAS,GAAvE,mBAAOqC,EAAP,KAAgCC,EAAhC,KACA,EAAkDtC,oBAAS,GAA3D,mBAAOuC,EAAP,KAA0BC,EAA1B,KACA,EAAsDxC,oBAAS,GAA/D,mBAAOyC,EAAP,KAA4BC,EAA5B,KACA,EAAwC1C,mBAA8B,MAAtE,mBAAO2C,EAAP,KAAqB5C,EAArB,KAqDA,OAnBA6C,qBAAU,WACRF,GAAuB,GACvBF,GAAqB,GAErB/C,EAAA,2BAA0C7B,EAAKC,KAC5CuB,MAAK,SAAAyC,GACJO,EAAgBP,GAEXA,EAASgB,QACZH,GAAuB,MAG1BrB,OAAM,WACLiB,GAA2B,GAC3BvC,EAAgBP,EAAasD,QAE9BpB,SAAQ,kBAAMc,GAAqB,QACrC,CAAC5E,IAGF,qBAAKF,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOE,EAAKC,GADZ,aACmBD,EAAKE,SAGxB,mBAAG,UAAQ,WAAX,SACGF,EAAKoB,UAIV,qBAAKtB,UAAU,QAAf,SACG6E,EACC,cAAC,EAAD,IAEA,qCACGF,GACC,qBAAK3E,UAAU,yBAAyB,UAAQ,gBAAhD,kCAKD+E,GACC,mBAAG/E,UAAU,aAAa,UAAQ,oBAAlC,+BAKA,OAACyE,QAAD,IAACA,MAAcU,SACf,cAAC,EAAD,CACEhB,SAAUM,EACVL,qBA3Ea,SAACiB,GAC5BtD,EAAA,oBAA2BsD,IACxB3D,MAAK,WACJ,IAAM4D,EAAe,OAAGb,QAAH,IAAGA,OAAH,EAAGA,EAAcc,QACpC,SAAClB,GAAD,OAAaA,EAAQlE,KAAOkF,KAGE,KAAb,OAAfC,QAAe,IAAfA,OAAA,EAAAA,EAAiBH,SACnBH,GAAuB,GAGzBN,EAAgBY,GAAmB,OAEpC3B,OAAM,kBAAMtB,EAAgBP,EAAa0D,cAmEhCf,IAAiBD,GACjB,wBACE,UAAQ,qBACRlE,KAAK,SACLN,UAAU,iBACVQ,QAAS,kBAAMT,GAA0B,IAJ3C,6BAUDkF,GACC,mBAAGjF,UAAU,iBAAb,SACGiF,SAOVT,GACC,cAACxC,EAAD,CACEG,OAAQjC,EAAKC,GACbiC,cAvFmB,SAACqD,GAC5Bf,GAAgB,SAAAgB,GACd,OAAc,OAAPA,QAAO,IAAPA,KAASP,OAAT,sBAAsBO,GAAtB,CAA+BD,IAAc,CAACA,MAEvDT,GAAuB,IAoFf3C,gBAhHQ,SAAC0B,GACjB1B,EAAgB0B,GAEhB/C,YAAW,WACTqB,EAAgB,QACf,cCvBMsD,EAAgC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9C,EAA0BtD,qBAA1B,mBAAOuD,EAAP,KAAcC,EAAd,KACA,EAAsCxD,mBAAsB,MAA5D,mBAAOyD,EAAP,KAAoBC,EAApB,KACA,EAAgD1D,oBAAS,GAAzD,mBAAO2D,EAAP,KAAyBC,EAAzB,KACMC,EAAcC,iBAA8B,MAElDlB,qBAAU,WACRnD,EAAmB,UAChBL,KAAKoE,GACLnC,OAAM,SAAAC,GACL,MAAM,IAAIE,MAAMF,QAEnB,IAuBH,OAfAsB,qBAAU,WACR,IAAMmB,EAAqB,SAAC7C,GACtB2C,EAAYT,UACVS,EAAYT,QAAQY,SAAS9C,EAAMC,SACvCyC,GAAoB,IAMxB,OAFAK,OAAOC,iBAAiB,QAASH,GAE1B,WACLE,OAAOE,oBAAoB,QAASJ,MAErC,IAGD,sBACEK,IAAKP,EACL,UAAQ,eACRnG,UAAWO,IAAW,WAAY,CAChC,YAAa0F,IAJjB,UAOE,qBAAKjG,UAAU,mBAAf,SACE,yBACEM,KAAK,SACLN,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdQ,QAAS,kBAAM0F,GAAqBD,IALtC,UAOE,+BAAOF,EAAcA,EAAYlD,KAAO,kBAExC,sBAAM7C,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBACEA,UAAU,gBACVG,GAAG,gBACHwG,KAAK,OAHP,SAKE,qBAAK3G,UAAU,mBAAf,SACG6F,GAASA,EAAM5F,KAAI,SAAA2G,GAAI,OACtB,mBAEEtC,KAAI,gBAAWsC,EAAKzG,IACpBH,UAAWO,IAAW,gBAAiB,CACrC,YAAaqG,IAASb,IAExBvF,QAAS,kBA1DF,SAACoG,GAClBhB,EAAQgB,GACRZ,EAAeY,GACfV,GAAoB,GAuDKW,CAAWD,IAN5B,SAQGA,EAAK/D,MAPD+D,EAAKzG,eC9DX2G,EAAgB,WAC3B,MAAwCxE,mBAAsB,MAA9D,mBAAOyE,EAAP,KAAqBC,EAArB,KACA,EAAkC1E,mBAAwB,MAA1D,mBAAO2E,EAAP,KAAkBC,EAAlB,KACA,EAA0D5E,oBAAS,GAAnE,mBAAO6E,EAAP,KAA8BC,EAA9B,KACA,EAAoD9E,oBAAS,GAA7D,mBAAO+E,EAAP,KAA2BC,EAA3B,KACA,EAAgDhF,oBAAS,GAAzD,mBAAOiF,EAAP,KAAyBC,EAAzB,KACA,EAAoClF,mBAAsB,MAA1D,mBAAOmF,EAAP,KAAmBC,EAAnB,KACA,EAA4DpF,oBAAS,GAArE,mBAAOkC,EAAP,KAA+BzE,EAA/B,KA6BA,OArBAmF,qBAAU,WACRsC,GAAoB,GAEhBT,IACFO,GAAsB,GAEtBvF,EAAA,+BAAoCgF,QAApC,IAAoCA,OAApC,EAAoCA,EAAc5G,KAC/CuB,MAAK,SAAAmE,GACJqB,EAAarB,GAERA,EAAMV,QACTqC,GAAoB,MAGvB7D,OAAM,kBAAMyD,GAAyB,MACrCpD,SAAQ,WACPsD,GAAsB,SAG3B,CAACP,IAGF,sBAAM/G,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAc4F,QAlCH,SAACgB,GACxBI,EAAgBJ,GAChBc,EAAc,MACdR,EAAa,WAkCH,sBAAKlH,UAAU,QAAQ,UAAQ,cAA/B,WACI+G,GACA,mBAAG,UAAQ,iBAAX,8BAKDM,GACC,cAAC,EAAD,IAGDF,GACC,qBACEnH,UAAU,yBACV,UAAQ,oBAFV,mCAQDuH,GACC,qBACEvH,UAAU,0BACV,UAAQ,aAFV,4BAQA,OAACiH,QAAD,IAACA,MAAW9B,SACZ,cAAC,EAAD,CACEvF,MAAOqH,EACPpH,aAAc4H,EACd3H,SAAU4H,EACV3H,0BAA2BA,YAOrC,qBACE,UAAQ,UACRC,UAAWO,IACT,OACA,YACA,eACA,UAAW,CACT,gBAAiBkH,IAPvB,SAWE,qBAAKzH,UAAU,gCAAf,SACGyH,GACC,cAAC,EAAD,CACEvH,KAAMuH,EACNjD,uBAAwBA,EACxBzE,0BAA2BA,gBCjH7C4H,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7d159f21.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\n\ninterface Props {\n  posts: Post[];\n  selectedPost: Post | null;\n  openPost: (post: Post | null) => void;\n  setIsNewCommentFormActive: (value: boolean) => void;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  openPost,\n  setIsNewCommentFormActive,\n}) => {\n  const hadleOpenPost = (isCurrentPostSelected: boolean, currentPost: Post) => {\n    openPost(isCurrentPostSelected\n      ? null : currentPost);\n\n    setIsNewCommentFormActive(false);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n            const isThisPostSelected = selectedPost === post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': !isThisPostSelected,\n                    })}\n                    onClick={() => hadleOpenPost(isThisPostSelected, post)}\n                  >\n                    {isThisPostSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorMessage {\n  Get = 'Unable to download comments.',\n  Add = 'Unable to add comment.',\n  Delete = 'Unable to delete comment.',\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../../types/Comment';\nimport { client } from '../../utils/fetchClient';\nimport { ErrorMessage } from '../../types/ErrorMessage';\n\ninterface Props {\n  postId: number;\n  setNewComment: (comment:Comment) => void;\n  setErrorMessage: (message : ErrorMessage) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  postId,\n  setNewComment,\n  setErrorMessage,\n}) => {\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isBodyError, setIsBodyError] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setEmail(event.target.value);\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIsBodyError(false);\n    setBody(event.target.value);\n  };\n\n  const clear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsBodyError(false);\n  };\n\n  function addComment(event: React.MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n\n    if (!name) {\n      setIsNameError(true);\n    }\n\n    if (!email) {\n      setIsEmailError(true);\n    }\n\n    if (!body) {\n      setIsBodyError(true);\n    }\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    client.post<Comment>('/comments', {\n      postId,\n      name,\n      email,\n      body,\n    })\n      .then(setNewComment)\n      .catch(e => {\n        setErrorMessage(ErrorMessage.Add);\n        throw new Error(e.message);\n      })\n      .finally(() => {\n        setBody('');\n        setIsLoading(false);\n      });\n  }\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email}\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={body}\n            className={classNames('textarea', {\n              'is-danger': isBodyError,\n            })}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n            onClick={event => addComment(event)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {/* {isCommentWasAdded === false && (\n        <p className=\"help is-danger\">\n          Unable to add comment. Please try again.\n        </p>\n      )}\n\n      {isCommentWasAdded && (\n        <p className=\"help is-success\">\n          Comment was added successfully.\n        </p>\n      )} */}\n\n    </form>\n  );\n});\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\n// import { client } from '../../utils/fetchClient';\n// import { ErrorMessage } from '../../types/ErrorMessage';\n\ninterface Props {\n  comments: Comment[];\n  setCommentIdToDelete: (value: number) => void;\n  // setErrorMessage: (message: ErrorMessage) => void;\n}\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  setCommentIdToDelete,\n  // setErrorMessage,\n}) => {\n  // const deleteComment = (commentId: number) => {\n  //   client.delete(`/comments/${commentId}`)\n  //     .then(() => setCommentIdToDelete(commentId))\n  //     .catch(() => setErrorMessage(ErrorMessage.Delete));\n  // };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a\n              href={`mailto:${comment.email}`}\n              data-cy=\"CommentAuthor\"\n            >\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => setCommentIdToDelete(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\nimport { Comment } from '../../types/Comment';\nimport { CommentsList } from '../CommentsList';\nimport { ErrorMessage } from '../../types/ErrorMessage';\n\ninterface Props {\n  post: Post;\n  isNewCommentFormActive: boolean;\n  setIsNewCommentFormActive: (value: boolean) => void;\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  isNewCommentFormActive,\n  setIsNewCommentFormActive,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [hasCommentsLoadingError, setHasCommentsLoadingError] = useState(false);\n  const [isCommentsLOading, setIsCommentsLoading] = useState(false);\n  const [isPostCommentsEmpty, setIsPostCommentsEmpty] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<ErrorMessage | null>(null);\n  // const [isNewCommentFormActive, setIsNewCommentFormActive] = useState(false);\n\n  const showError = (message: ErrorMessage) => {\n    setErrorMessage(message);\n\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 3000);\n  };\n\n  const locallyDeleteComment = (commentId: number) => {\n    client.delete(`/comments/${commentId}`)\n      .then(() => {\n        const updatedComments = postComments?.filter(\n          (comment) => comment.id !== commentId,\n        );\n\n        if (updatedComments?.length === 0) {\n          setIsPostCommentsEmpty(true);\n        }\n\n        setPostComments(updatedComments || []);\n      })\n      .catch(() => setErrorMessage(ErrorMessage.Delete));\n  };\n\n  const locallyAddNewComment = (newComment: Comment) => {\n    setPostComments(current => {\n      return current?.length ? [...current, newComment] : [newComment];\n    });\n    setIsPostCommentsEmpty(false);\n  };\n\n  useEffect(() => {\n    setIsPostCommentsEmpty(false);\n    setIsCommentsLoading(true);\n\n    client.get<Comment[]>(`/comments?postId=${post.id}`)\n      .then(comments => {\n        setPostComments(comments);\n\n        if (!comments.length) {\n          setIsPostCommentsEmpty(true);\n        }\n      })\n      .catch(() => {\n        setHasCommentsLoadingError(true);\n        setErrorMessage(ErrorMessage.Get);\n      })\n      .finally(() => setIsCommentsLoading(false));\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLOading ? (\n            <Loader />\n          ) : (\n            <>\n              {hasCommentsLoadingError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {isPostCommentsEmpty && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {!!postComments?.length && (\n                <CommentsList\n                  comments={postComments}\n                  setCommentIdToDelete={locallyDeleteComment}\n                  // setErrorMessage={showError}\n                />\n              )}\n\n              {(postComments && !isNewCommentFormActive) && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsNewCommentFormActive(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n\n              {errorMessage && (\n                <p className=\"help is-danger\">\n                  {errorMessage}\n                </p>\n              )}\n            </>\n          )}\n        </div>\n\n        {isNewCommentFormActive && (\n          <NewCommentForm\n            postId={post.id}\n            setNewComment={locallyAddNewComment}\n            setErrorMessage={showError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\ninterface Props {\n  setUser: (user: User) => void;\n}\n\nexport const UserSelector: React.FC<Props> = ({ setUser }) => {\n  const [users, setUsers] = useState<User[]>();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(setUsers)\n      .catch(e => {\n        throw new Error(e);\n      });\n  }, []);\n\n  const selectUser = (user: User) => {\n    setUser(user);\n    setCurrentUser(user);\n    setIsDropdownActive(false);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current\n        && !dropdownRef.current.contains(event.target as Node)) {\n        setIsDropdownActive(false);\n      }\n    };\n\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(!isDropdownActive)}\n        >\n          <span>{currentUser ? currentUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users && users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user === currentUser,\n              })}\n              onClick={() => selectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [hasUserPostsLoadError, setHasUserPostsLoadError] = useState(false);\n  const [isUserPostsLoading, setIsUserPostsLoading] = useState(false);\n  const [isUserPostsEmpty, setIsUserPostsEmpty] = useState(false);\n  const [openedPost, setOpenedPost] = useState<Post | null>(null);\n  const [isNewCommentFormActive, setIsNewCommentFormActive] = useState(false);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setOpenedPost(null);\n    setUserPosts(null);\n  };\n\n  useEffect(() => {\n    setIsUserPostsEmpty(false);\n\n    if (selectedUser) {\n      setIsUserPostsLoading(true);\n\n      client.get<Post[]>(`/posts?userId=${selectedUser?.id}`)\n        .then(users => {\n          setUserPosts(users);\n\n          if (!users.length) {\n            setIsUserPostsEmpty(true);\n          }\n        })\n        .catch(() => setHasUserPostsLoadError(true))\n        .finally(() => {\n          setIsUserPostsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector setUser={handleUserSelect} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isUserPostsLoading && (\n                  <Loader />\n                )}\n\n                {hasUserPostsLoadError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isUserPostsEmpty && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!!userPosts?.length && (\n                  <PostsList\n                    posts={userPosts}\n                    selectedPost={openedPost}\n                    openPost={setOpenedPost}\n                    setIsNewCommentFormActive={setIsNewCommentFormActive}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': openedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {openedPost && (\n                <PostDetails\n                  post={openedPost}\n                  isNewCommentFormActive={isNewCommentFormActive}\n                  setIsNewCommentFormActive={setIsNewCommentFormActive}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}